package me.manuloff.apps.knasu.study.telegram.handler.impl.workingprogram;

import com.pengrad.telegrambot.model.Message;
import com.pengrad.telegrambot.model.request.InlineKeyboardMarkup;
import com.pengrad.telegrambot.model.request.InputMediaPhoto;
import com.pengrad.telegrambot.request.DeleteMessages;
import com.pengrad.telegrambot.request.SendMediaGroup;
import com.pengrad.telegrambot.response.MessagesResponse;
import lombok.Getter;
import lombok.NonNull;
import lombok.extern.log4j.Log4j2;
import me.manuloff.apps.knasu.study.api.KnasuAPI;
import me.manuloff.apps.knasu.study.api.response.EducationalProgramResponse;
import me.manuloff.apps.knasu.study.api.response.GroupProgramAnnotation;
import me.manuloff.apps.knasu.study.api.response.WorkingStudyPlanResponse;
import me.manuloff.apps.knasu.study.data.UserData;
import me.manuloff.apps.knasu.study.data.UserStage;
import me.manuloff.apps.knasu.study.telegram.Keyboards;
import me.manuloff.apps.knasu.study.telegram.TelegramManager;
import me.manuloff.apps.knasu.study.telegram.handler.CommandHandler;
import me.manuloff.apps.knasu.study.telegram.method.ACallback;
import me.manuloff.apps.knasu.study.telegram.method.DMessage;
import me.manuloff.apps.knasu.study.telegram.method.EMessage;
import me.manuloff.apps.knasu.study.telegram.method.SMessage;
import org.jetbrains.annotations.Nullable;

import java.util.*;

/**
 * @author Manuloff
 * @since 15:38 15.12.2024
 */
@Log4j2
public class WorkingProgramsCommand extends CommandHandler {

	public static final Map<Long, Session> sessions = new HashMap<>();

	public WorkingProgramsCommand() {
		super("/working_programs", "üìö –†–∞–±–æ—á–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã");
	}

	@Override
	public void handleCommand(@NonNull Message message) {
		long userId = message.from().id();

		userData(message).setStage(UserStage.WORKING_PROGRAM);

		int messageId = SMessage.of(message).text("""
						‚è≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.
						""")
				.replyMarkup(Keyboards.backToMainMenu())
				.execute().message().messageId();

		String group = Objects.requireNonNull(userData(message).getGroup());

		String specialityCode = KnasuAPI.getGroupCodes().getCodeByName(group);
		if (specialityCode == null) {
			DMessage.of(userId, messageId).execute();
			SMessage.of(userId).text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–¥ –≤–∞—à–µ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏. –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.").execute();
			return;
		}

		EducationalProgramResponse program = KnasuAPI.getEducationalProgram(specialityCode);
		String workingStudyPlanUrl = program.getWorkingStudyPlanUrl(group);
		if (workingStudyPlanUrl == null) {
			DMessage.of(userId, messageId).execute();
			SMessage.of(userId).text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Ä–∞–±–æ—á–∏–π –ø–ª–∞–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.").execute();
			return;
		}

		sessions.remove(userId);

		periodSelection(userId, -1, null);
	}


	public static void periodSelection(long userId, int messageId, @Nullable String callbackId) {
		handle(() -> {
			WorkingStudyPlanResponse response = getWorkingStudyPlan(userId);

			InlineKeyboardMarkup markup = Keyboards.periodSelection(response);

			String text = """
					‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.
					
					üìÖ –í—ã–±–µ—Ä–∏—Ç–µ, –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, –∏–ª–∏ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –∏—Ç–æ–≥–æ–≤–æ–π –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏.
					""";

			if (messageId != -1) {
				EMessage.of(userId, messageId).text(text).replyMarkup(markup).execute();

			} else {
				int newMessageId = SMessage.of(userId).text(text).replyMarkup(markup).execute().message().messageId();
				sessions.computeIfAbsent(userId, k -> new Session()).messageIds.add(newMessageId);
			}

		}, callbackId, userId);
	}

	public static void programSelection(long userId, int messageId, @NonNull String callbackId, @NonNull String periodName) {
		handle(() -> {
			WorkingStudyPlanResponse response = getWorkingStudyPlan(userId);

			WorkingStudyPlanResponse.Period period = response.getPeriods().stream().filter(p -> p.getName().equalsIgnoreCase(periodName))
					.findFirst().orElseThrow();

			InlineKeyboardMarkup markup = Keyboards.programSelection(periodName, period.getPrograms());

			EMessage.of(userId, messageId).text("""
							üéì –°–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –ø–µ—Ä–∏–æ–¥ *%s*, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –º–µ–Ω—é –Ω–∏–∂–µ.
							–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π.
							""", periodName)
					.replyMarkup(markup).execute();

			sessions.computeIfAbsent(userId, k -> new Session()).messageIds.add(messageId);

		}, callbackId, userId);
	}

	public static void showExam(long userId, int messageId, @NonNull String callbackId) {
		handle(() -> {
			WorkingStudyPlanResponse response = getWorkingStudyPlan(userId);

			InlineKeyboardMarkup markup = Keyboards.exam("https://knastu.ru" + response.getStateExam());

			EMessage.of(userId, messageId).text("""
							üìö –î–ª—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –∏—Ç–æ–≥–æ–≤–æ–π –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞, –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—É.
							""")
					.replyMarkup(markup).execute();

		}, callbackId, userId);
	}

	public static void showProgram(long userId, int messageId, @NonNull String callbackId, @NonNull String periodName, int programIndex) {
		handle(() -> {
			WorkingStudyPlanResponse response = getWorkingStudyPlan(userId);

			WorkingStudyPlanResponse.Period period = response.getPeriods().stream().filter(p -> p.getName().equalsIgnoreCase(periodName))
					.findFirst().orElseThrow();
			WorkingStudyPlanResponse.Program program = period.getPrograms().get(programIndex);

			GroupProgramAnnotation annotation = KnasuAPI.getGroupProgramAnnotation(program.getAnnotation());

			DMessage.of(userId, messageId).execute();

			InputMediaPhoto[] array = annotation.getImages().stream().map(InputMediaPhoto::new).toArray(InputMediaPhoto[]::new);
			MessagesResponse msgResponse = TelegramManager.bot().execute(new SendMediaGroup(userId, array));

			Session session = sessions.computeIfAbsent(userId, k -> new Session());

			StringBuilder builder = new StringBuilder("""
					üìö –í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã *%s* –∑–∞ *%s*.
					""");

			if (msgResponse.isOk()) {
				session.messageIds.addAll(Arrays.stream(msgResponse.messages()).map(Message::messageId).toList());

				builder.append("""
						
						üîº –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã—Ä–µ–∑–∫–∏ –≤—ã—à–µ.
						""");
			}

			builder.append("""
					
					üìÑ –ü–µ—Ä–µ—á–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:
					 - –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è
					 - –†–∞–±–æ—á–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã (–†–ü–î)
					""");

			if (program.getAssessmentResources() != null) {
				builder.append("""
						 - –§–æ–Ω–¥ –æ—Ü–µ–Ω–æ—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ (–§–û–°)
						""");
			}

			builder.append("""
					
					üîΩ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–∞–∂–¥—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.
					""");

			int newMessageId = SMessage.of(userId).text(builder.toString(), program.getName(), periodName)
					.replyMarkup(Keyboards.program(program, periodName))
					.execute().message().messageId();

			session.messageIds.add(newMessageId);

		}, callbackId, userId);
	}

	@NonNull
	private static WorkingStudyPlanResponse getWorkingStudyPlan(long userId) {
		String group = UserData.of(userId).getGroup();
		assert group != null;

		String code = KnasuAPI.getGroupCodes().getCodeByName(group);
		assert code != null;

		String workingStudyPlanUrl = KnasuAPI.getEducationalProgram(code).getWorkingStudyPlanUrl(group);
		assert workingStudyPlanUrl != null;

		return KnasuAPI.getWorkingProgram(workingStudyPlanUrl);
	}

	private static void handle(@NonNull Runnable runnable, @Nullable String callbackId, long userId) {
		Session session = sessions.computeIfAbsent(userId, k -> new Session());

		if (session.lock) {
			return;
		}

		session.lock = true;

		try {
			runnable.run();

		} catch (Exception e) {
			log.error("Failed to handle", e);

			if (callbackId != null) {
				ACallback.of(callbackId).text("üö® –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
						.showAlert(true)
						.execute();
			}

		} finally {
			session.lock = false;
		}
	}


	@Getter
	public static class Session {
		private final List<Integer> messageIds = new ArrayList<>();

		private boolean lock = false;
	}

	public static void removeMessagesSafety(long userId) {
		try {
			Session session = sessions.get(userId);
			if (session == null) return;

			TelegramManager.bot().execute(new DeleteMessages(userId,
					session.messageIds.stream().mapToInt(Integer::intValue).toArray())
			);

			session.messageIds.clear();

		} catch (Exception e) {}
	}
}
